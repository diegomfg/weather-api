{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/GM/Desktop/weather-api/react/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/GM/Desktop/weather-api/react/src/Components/Api.jsx\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  width: 20rem;\\n  border: 0.1rem solid gray;\\n  display: block;\\n  padding: 1.4rem;\\n  margin: 1rem auto;\\n  border-radius: 0.4rem;\\n  font-size: 1.8rem;\\n\\n  ::placeholder {\\n    color: teal;\\n  }\\n\\n  :focus {\\n    outline: red;\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  background: pink;\\n  border: 0.05rem solid gray;\\n  padding: 0.5rem;\\n  width: 8rem;\\n  margin: 1rem auto;\\n  display: block;\\n  font-size: 1.6rem;\\n  border-radius: 0.4rem;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\nimport Wrapper from \"./HOC/Wrapper\";\nconst geoApiToken = \"pk.eyJ1IjoiZGllZ29tZmciLCJhIjoiY2p3eTU0b2pwMDBuZTQ5bzFzbnF1NnA3MSJ9.4PNeV8Pr0pye2xVU6VxIFw\";\nconst Button = styled.button(_templateObject());\nconst Input = styled.input(_templateObject2());\n\nclass Api extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      city: null,\n      geolocationUrl: \"https://api.mapbox.com/geocoding/v5/mapbox.places/\".concat(encodeURI(\"Miami Florida\"), \".json?access_token=\").concat(geoApiToken)\n    };\n\n    this.setGeoUrl = () => {\n      let cityToVisit = document.getElementById(\"input\").value;\n      let encoded = encodeURIComponent(cityToVisit);\n      let newUrl = \"https://api.mapbox.com/geocoding/v5/mapbox.places/\".concat(encoded, \".json?access_token=\").concat(geoApiToken);\n      this.setState({\n        geolocationUrl: newUrl\n      });\n    };\n\n    this.fetchGeolocation = async event => {\n      event.preventDefault();\n      await this.setGeoUrl();\n\n      try {\n        let response = await axios.get(this.state.geolocationUrl);\n        const center = response.data.features[0].center;\n        let latitude = center[1];\n        let longitude = center[0];\n        this.fetchDarksky(latitude, longitude);\n      } catch (error) {\n        this.setState({\n          errorMsg: \"Unable to connect to the service!\"\n        });\n        console.log(error);\n      }\n    };\n\n    this.fetchDarksky = async (latitude, longitude) => {\n      try {\n        let response = await axios.get(\"/api/weather/\".concat(latitude, \"/\").concat(longitude));\n        console.log(response.data);\n        this.setState({\n          currentTemperature: response.data.apparentTemperature\n        });\n      } catch (error) {\n        this.setState({\n          errorMsg: \"Unable to connect to the service!\"\n        });\n        console.log(\"error fetchDarksky\");\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"API page\"), React.createElement(\"form\", {\n      onSubmit: this.fetchGeolocation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(Input, {\n      placeholder: \"Enter location here\",\n      id: \"input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Hello\")));\n  }\n\n}\n\nexport default Api;","map":{"version":3,"sources":["/Users/GM/Desktop/weather-api/react/src/Components/Api.jsx"],"names":["React","Component","axios","styled","Wrapper","geoApiToken","Button","button","Input","input","Api","state","city","geolocationUrl","encodeURI","setGeoUrl","cityToVisit","document","getElementById","value","encoded","encodeURIComponent","newUrl","setState","fetchGeolocation","event","preventDefault","response","get","center","data","features","latitude","longitude","fetchDarksky","error","errorMsg","console","log","currentTemperature","apparentTemperature","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\nimport Wrapper from \"./HOC/Wrapper\";\nconst geoApiToken =\n  \"pk.eyJ1IjoiZGllZ29tZmciLCJhIjoiY2p3eTU0b2pwMDBuZTQ5bzFzbnF1NnA3MSJ9.4PNeV8Pr0pye2xVU6VxIFw\";\n\nconst Button = styled.button`\n  background: pink;\n  border: 0.05rem solid gray;\n  padding: 0.5rem;\n  width: 8rem;\n  margin: 1rem auto;\n  display: block;\n  font-size: 1.6rem;\n  border-radius: 0.4rem;\n`;\n\nconst Input = styled.input`\n  width: 20rem;\n  border: 0.1rem solid gray;\n  display: block;\n  padding: 1.4rem;\n  margin: 1rem auto;\n  border-radius: 0.4rem;\n  font-size: 1.8rem;\n\n  ::placeholder {\n    color: teal;\n  }\n\n  :focus {\n    outline: red;\n  }\n`;\n\nclass Api extends Component {\n  state = {\n    city: null,\n    geolocationUrl: `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURI(\n      \"Miami Florida\"\n    )}.json?access_token=${geoApiToken}`\n  };\n\n  setGeoUrl = () => {\n    let cityToVisit = document.getElementById(\"input\").value;\n    let encoded = encodeURIComponent(cityToVisit);\n    let newUrl = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encoded}.json?access_token=${geoApiToken}`;\n\n    this.setState({\n      geolocationUrl: newUrl\n    });\n  };\n\n  // NO CORS header. Request blocked\n  fetchGeolocation = async event => {\n    event.preventDefault();\n    await this.setGeoUrl();\n\n    try {\n      let response = await axios.get(this.state.geolocationUrl);\n      const { center } = response.data.features[0];\n      let latitude = center[1];\n      let longitude = center[0];\n\n      this.fetchDarksky(latitude, longitude);\n    } catch (error) {\n      this.setState({ errorMsg: \"Unable to connect to the service!\" });\n      console.log(error);\n    }\n  };\n\n  fetchDarksky = async (latitude, longitude) => {\n    try {\n      let response = await axios.get(`/api/weather/${latitude}/${longitude}`);\n      console.log(response.data);\n      this.setState({ currentTemperature: response.data.apparentTemperature });\n    } catch (error) {\n      this.setState({ errorMsg: \"Unable to connect to the service!\" });\n      console.log(\"error fetchDarksky\");\n    }\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <h1 className=\"Title\">API page</h1>\n        <form onSubmit={this.fetchGeolocation}>\n          <Input placeholder=\"Enter location here\" id=\"input\" />\n          <Button>Hello</Button>\n        </form>\n      </Wrapper>\n    );\n  }\n}\n\nexport default Api;\n"]},"metadata":{},"sourceType":"module"}