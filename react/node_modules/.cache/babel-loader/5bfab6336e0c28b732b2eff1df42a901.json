{"ast":null,"code":"var _jsxFileName = \"/Users/GM/Desktop/weather-api/react/src/Components/Api.jsx\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Wrapper from \"./HOC/Wrapper\";\nconst geoApiToken = \"pk.eyJ1IjoiZGllZ29tZmciLCJhIjoiY2p3eTU0b2pwMDBuZTQ5bzFzbnF1NnA3MSJ9.4PNeV8Pr0pye2xVU6VxIFw\";\n\nclass Api extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isModalOpen: false,\n      geolocationUrl: \"https://api.mapbox.com/geocoding/v5/mapbox.places/\".concat(encodeURI(\"Miami Florida\"), \".json?access_token=\").concat(geoApiToken)\n    };\n\n    this.setGeoUrl = () => {\n      let cityToVisit = document.getElementById(\"input\").value;\n\n      if (!cityToVisit) {\n        cityToVisit = \"Miami Florida\";\n      }\n\n      let encodedComponent = encodeURIComponent(cityToVisit);\n      let newUrl = \"https://api.mapbox.com/geocoding/v5/mapbox.places/\".concat(encodedComponent, \".json?access_token=\").concat(geoApiToken);\n      this.setState({\n        geolocationUrl: newUrl\n      });\n    };\n\n    this.fetchGeolocation = async () => {\n      try {\n        // sets the geolocation URL after getting the input from the user\n        await this.setGeoUrl(); // fetching the latitude (center[1]) and longitude (center[0])\n\n        let response = await axios.get(this.state.geolocationUrl);\n        const center = response.data.features[0].center;\n        let latitude = center[1];\n        let longitude = center[0];\n        /**\n         * @param latitude is the latitude of the city, collected from the Geolocation API\n         * @param longitude is the longitude of the city, collected from the Geolocation API\n         */\n\n        this.fetchDarksky(latitude, longitude);\n      } catch (error) {\n        this.setState({\n          error: \"Unable to connect to the service!\"\n        });\n        console.log(error);\n      }\n    };\n\n    this.fetchDarksky = async (latitude = 0, longitude = 0) => {\n      try {\n        let response = await axios.get(\"/api/weather/\".concat(latitude, \"/\").concat(longitude));\n        console.log(response.data);\n        this.setState({\n          data: response.data\n        });\n      } catch (error) {\n        this.setState({\n          error: \"Unable to connect to the service!\"\n        });\n        console.log(error);\n        console.log(\"error fetchDarksky\");\n      }\n    };\n\n    this.toggleModal = () => {\n      this.setState(prevState => {\n        return;\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Wrapper, {\n      className: \"Wrapper\",\n      fetchGeolocation: this.fetchGeolocation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Api;","map":{"version":3,"sources":["/Users/GM/Desktop/weather-api/react/src/Components/Api.jsx"],"names":["React","Component","axios","Wrapper","geoApiToken","Api","state","isModalOpen","geolocationUrl","encodeURI","setGeoUrl","cityToVisit","document","getElementById","value","encodedComponent","encodeURIComponent","newUrl","setState","fetchGeolocation","response","get","center","data","features","latitude","longitude","fetchDarksky","error","console","log","toggleModal","prevState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,eAApB;AAEA,MAAMC,WAAW,GACf,4FADF;;AAGA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BK,KAD0B,GAClB;AACNC,MAAAA,WAAW,EAAE,KADP;AAENC,MAAAA,cAAc,8DAAuDC,SAAS,CAC5E,eAD4E,CAAhE,gCAESL,WAFT;AAFR,KADkB;;AAAA,SAQ1BM,SAR0B,GAQd,MAAM;AAChB,UAAIC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,KAAnD;;AACA,UAAI,CAACH,WAAL,EAAkB;AAChBA,QAAAA,WAAW,GAAG,eAAd;AACD;;AACD,UAAII,gBAAgB,GAAGC,kBAAkB,CAACL,WAAD,CAAzC;AACA,UAAIM,MAAM,+DAAwDF,gBAAxD,gCAA8FX,WAA9F,CAAV;AAEA,WAAKc,QAAL,CAAc;AACZV,QAAAA,cAAc,EAAES;AADJ,OAAd;AAGD,KAnByB;;AAAA,SAqB1BE,gBArB0B,GAqBP,YAAY;AAC7B,UAAI;AACF;AACA,cAAM,KAAKT,SAAL,EAAN,CAFE,CAIF;;AACA,YAAIU,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAN,CAAU,KAAKf,KAAL,CAAWE,cAArB,CAArB;AALE,cAMMc,MANN,GAMiBF,QAAQ,CAACG,IAAT,CAAcC,QAAd,CAAuB,CAAvB,CANjB,CAMMF,MANN;AAOF,YAAIG,QAAQ,GAAGH,MAAM,CAAC,CAAD,CAArB;AACA,YAAII,SAAS,GAAGJ,MAAM,CAAC,CAAD,CAAtB;AAEA;;;;;AAIA,aAAKK,YAAL,CAAkBF,QAAlB,EAA4BC,SAA5B;AACD,OAfD,CAeE,OAAOE,KAAP,EAAc;AACd,aAAKV,QAAL,CAAc;AAAEU,UAAAA,KAAK,EAAE;AAAT,SAAd;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KAzCyB;;AAAA,SAgD1BD,YAhD0B,GAgDX,OAAOF,QAAQ,GAAG,CAAlB,EAAqBC,SAAS,GAAG,CAAjC,KAAuC;AACpD,UAAI;AACF,YAAIN,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAN,wBAA0BI,QAA1B,cAAsCC,SAAtC,EAArB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYV,QAAQ,CAACG,IAArB;AACA,aAAKL,QAAL,CAAc;AAAEK,UAAAA,IAAI,EAAEH,QAAQ,CAACG;AAAjB,SAAd;AACD,OAJD,CAIE,OAAOK,KAAP,EAAc;AACd,aAAKV,QAAL,CAAc;AAAEU,UAAAA,KAAK,EAAE;AAAT,SAAd;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;AACF,KA1DyB;;AAAA,SA6D1BC,WA7D0B,GA6DZ,MAAI;AAChB,WAAKb,QAAL,CAAec,SAAD,IAAa;AACzB;AACD,OAFD;AAGD,KAjEyB;AAAA;;AAmE1BC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAC,SAAnB;AAA6B,MAAA,gBAAgB,EAAE,KAAKd,gBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AAzEyB;;AA4E5B,eAAed,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Wrapper from \"./HOC/Wrapper\";\n\nconst geoApiToken =\n  \"pk.eyJ1IjoiZGllZ29tZmciLCJhIjoiY2p3eTU0b2pwMDBuZTQ5bzFzbnF1NnA3MSJ9.4PNeV8Pr0pye2xVU6VxIFw\";\n\nclass Api extends Component {\n  state = {\n    isModalOpen: false,\n    geolocationUrl: `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURI(\n      \"Miami Florida\"\n    )}.json?access_token=${geoApiToken}`\n  };\n\n  setGeoUrl = () => {\n    let cityToVisit = document.getElementById(\"input\").value;\n    if (!cityToVisit) {\n      cityToVisit = \"Miami Florida\";\n    }\n    let encodedComponent = encodeURIComponent(cityToVisit);\n    let newUrl = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodedComponent}.json?access_token=${geoApiToken}`;\n\n    this.setState({\n      geolocationUrl: newUrl\n    });\n  };\n\n  fetchGeolocation = async () => {\n    try {\n      // sets the geolocation URL after getting the input from the user\n      await this.setGeoUrl();\n\n      // fetching the latitude (center[1]) and longitude (center[0])\n      let response = await axios.get(this.state.geolocationUrl);\n      const { center } = response.data.features[0];\n      let latitude = center[1];\n      let longitude = center[0];\n\n      /**\n       * @param latitude is the latitude of the city, collected from the Geolocation API\n       * @param longitude is the longitude of the city, collected from the Geolocation API\n       */\n      this.fetchDarksky(latitude, longitude);\n    } catch (error) {\n      this.setState({ error: \"Unable to connect to the service!\" });\n      console.log(error);\n    }\n  };\n\n  /**\n   * @implements an api (proxy) call to the server and fetches the entire data\n   * @author Diego A. Matheus\n   */\n\n  fetchDarksky = async (latitude = 0, longitude = 0) => {\n    try {\n      let response = await axios.get(`/api/weather/${latitude}/${longitude}`);\n      console.log(response.data);\n      this.setState({ data: response.data });\n    } catch (error) {\n      this.setState({ error: \"Unable to connect to the service!\" });\n      console.log(error);\n      console.log(\"error fetchDarksky\");\n    }\n  };\n\n\n  toggleModal = ()=>{\n    this.setState((prevState)=>{\n      return \n    })\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Wrapper className=\"Wrapper\" fetchGeolocation={this.fetchGeolocation} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Api;\n"]},"metadata":{},"sourceType":"module"}